{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/drift/Documents/ReactNative/cal-assessment/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { LOGIN } from \"./src/constants/variables\";\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport AssessmentScreen from \"./src/screens/AssessmentScreen\";\nimport AllStaffScreen from \"./src/screens/AllStaffScreen\";\nimport ManagerScreen from \"./src/screens/ManagerScreen\";\nimport VideoWebViewScreen from \"./src/screens/VideoWebViewScreen\";\nimport LoginScreen from \"./src/screens/LoginScreen\";\nimport { AuthContext } from \"./src/components/context\";\nimport RootStackScreen from \"./src/screens/RootStackScreen\";\nimport { COLORS } from \"./src/constants/theme\";\nvar Stack = createStackNavigator();\nvar Tab = createMaterialTopTabNavigator();\n\nvar Questionnaire = function Questionnaire(_ref) {\n  var route = _ref.route;\n  var userId = route.params.userId;\n  var year = route.params.year;\n  var part = route.params.part;\n  return React.createElement(Tab.Navigator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, React.createElement(Tab.Screen, {\n    name: \"AllStaff\",\n    component: AllStaffScreen,\n    options: {\n      title: 'ทั่วไป'\n    },\n    initialParams: {\n      userId: userId,\n      year: year,\n      part: part\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Manager\",\n    component: ManagerScreen,\n    options: {\n      title: 'ผู้จัดการถาม'\n    },\n    initialParams: {\n      userId: userId,\n      year: year,\n      part: part\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar App = function App() {\n  var initialLoginState = {\n    isLoading: true,\n    userName: null,\n    userToken: null\n  };\n\n  var loginReducer = function loginReducer(prevState, action) {\n    switch (action.type) {\n      case 'RETRIEVE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'LOGIN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: action.id,\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'LOGOUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: null,\n          userToken: null,\n          isLoading: false\n        });\n    }\n  };\n\n  var _React$useReducer = React.useReducer(loginReducer, initialLoginState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      loginState = _React$useReducer2[0],\n      dispacth = _React$useReducer2[1];\n\n  var authContext = useMemo(function () {\n    return {\n      signIn: function signIn(userName, password) {\n        var userToken;\n        userToken = userName;\n        LOGIN.userid = userName;\n        dispacth({\n          type: 'LOGIN',\n          id: userName,\n          token: userToken\n        });\n      },\n      signOut: function signOut() {\n        dispacth({\n          type: 'LOGOUT'\n        });\n      }\n    };\n  }, []);\n  return React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, loginState.userToken != null ? React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: true,\n      headerRight: function headerRight() {\n        return React.createElement(Icon, {\n          name: \"sign-out\",\n          size: 20,\n          style: {\n            marginHorizontal: 16\n          },\n          onPress: function onPress() {\n            authContext.signOut();\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 34\n          }\n        });\n      }\n    },\n    initialRouteName: \"Home\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: HomeScreen,\n    options: {\n      title: 'หน้าแรก'\n    },\n    initialParams: {\n      userid: loginState.userToken\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Assessment\",\n    component: AssessmentScreen,\n    options: {\n      title: 'ปีประเมิน'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Questionnaire\",\n    component: Questionnaire,\n    options: {\n      title: 'แบบประเมิน'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"VideoWebView\",\n    component: VideoWebViewScreen,\n    options: {\n      title: 'ดูวิดีโอ'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  })) : React.createElement(RootStackScreen, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/drift/Documents/ReactNative/cal-assessment/App.js"],"names":["React","useState","useEffect","useMemo","NavigationContainer","createStackNavigator","createMaterialTopTabNavigator","Icon","LOGIN","HomeScreen","AssessmentScreen","AllStaffScreen","ManagerScreen","VideoWebViewScreen","LoginScreen","AuthContext","RootStackScreen","COLORS","Stack","Tab","Questionnaire","route","userId","params","year","part","title","App","initialLoginState","isLoading","userName","userToken","loginReducer","prevState","action","type","token","id","useReducer","loginState","dispacth","authContext","signIn","password","userid","signOut","headerShown","headerRight","marginHorizontal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { StyleSheet, Text, View, ActivityIndicator } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\n\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { LOGIN } from './src/constants/variables'\n\nimport HomeScreen from './src/screens/HomeScreen'\nimport AssessmentScreen from './src/screens/AssessmentScreen';\nimport AllStaffScreen from './src/screens/AllStaffScreen';\nimport ManagerScreen from './src/screens/ManagerScreen';\nimport VideoWebViewScreen from './src/screens/VideoWebViewScreen';\nimport LoginScreen from './src/screens/LoginScreen';\n\nimport { AuthContext } from './src/components/context';\nimport RootStackScreen from './src/screens/RootStackScreen';\nimport { COLORS } from './src/constants/theme';\n\nconst Stack = createStackNavigator();\nconst Tab = createMaterialTopTabNavigator();\n\nconst Questionnaire = ({ route }) => {\n  const userId = route.params.userId;\n  const year = route.params.year;\n  const part = route.params.part\n\n  // console.log(route);\n  return (\n    <Tab.Navigator>\n      <Tab.Screen\n        name=\"AllStaff\"\n        component={AllStaffScreen}\n        options={{ title: 'ทั่วไป' }}\n        initialParams={{ userId: userId, year: year, part: part }} />\n      <Tab.Screen\n        name=\"Manager\"\n        component={ManagerScreen}\n        options={{ title: 'ผู้จัดการถาม' }}\n        initialParams={{ userId: userId, year: year, part: part }} />\n    </Tab.Navigator>\n  );\n}\n\nconst App = () => {\n\n  // const [isLoading, setIsLoading] = useState(true);\n  // const [userToken, setUserToken] = useState(null);\n\n  const initialLoginState = {\n    isLoading: true,\n    userName: null,\n    userToken: null,\n  };\n\n  const loginReducer = (prevState, action) => {\n    switch (action.type) {\n      case 'RETRIEVE_TOKEN':\n        return {\n          ...prevState,\n          userToken: action.token,\n          isLoading: false\n        };\n      case 'LOGIN':\n        return {\n          ...prevState,\n          userName: action.id,\n          userToken: action.token,\n          isLoading: false\n        };\n      case 'LOGOUT':\n        return {\n          ...prevState,\n          userName: null,\n          userToken: null,\n          isLoading: false\n        };\n    }\n  };\n\n  const [loginState, dispacth] = React.useReducer(loginReducer, initialLoginState);\n\n  const authContext = useMemo(() => ({\n    signIn: (userName, password) => {\n      // setUserToken('asdf');\n      // setIsLoading(false);\n      let userToken;\n      // userName = null;\n      // if (userName === 'User' && password === 'Pass') {\n      userToken = userName;\n      LOGIN.userid = userName;\n\n      // console.log(LOGIN.userid);\n      // }\n      dispacth({ type: 'LOGIN', id: userName, token: userToken });\n    },\n    signOut: () => {\n      // setUserToken(null);\n      // setIsLoading(false);\n      dispacth({ type: 'LOGOUT' });\n    },\n  }), []);\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     // setIsLoading(false);\n  //     // dispacth({ type: 'RETRIEVE_TOKEN', token: '' });\n  //   }, 1000);\n\n  // }, [])\n\n  // if (loginState.isLoading) {\n  //   return (\n  //     <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n  //       <ActivityIndicator size=\"large\" />\n  //     </View>\n  //   )\n  // }\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      <NavigationContainer>\n      {/* {console.log(loginState.userToken)} */}\n        {loginState.userToken != null ? (\n         \n          <Stack.Navigator\n            screenOptions={{\n              headerShown: true,\n              headerRight: () => <Icon name='sign-out'\n                // color= {COLORS.primary}\n                size={20}\n                style={{ marginHorizontal: 16 }}\n                onPress={() => {\n                  authContext.signOut()\n                }}\n              />\n            }}\n            initialRouteName=\"Home\">\n\n            <Stack.Screen name=\"Home\" component={HomeScreen} options={{ title: 'หน้าแรก', }} initialParams={{ userid: loginState.userToken }} />\n            <Stack.Screen name=\"Assessment\" component={AssessmentScreen} options={{ title: 'ปีประเมิน' }} />\n            <Stack.Screen name=\"Questionnaire\" component={Questionnaire} options={{ title: 'แบบประเมิน' }} />\n            <Stack.Screen name=\"VideoWebView\" component={VideoWebViewScreen} options={{ title: 'ดูวิดีโอ' }} />\n          </Stack.Navigator>\n        )\n\n          :\n\n          <RootStackScreen />\n        }\n\n      </NavigationContainer>\n\n    </AuthContext.Provider>\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}